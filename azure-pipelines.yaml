name: Azure Pipelines

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- master
- staging

# ToDo: Replace the agent pool name, if you are using Udacity Cloud lab. 
# Otherwise, comment out the line below. 
pool: main_pool

variables:
  python.version: '3.10.14'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  azureServiceConnectionId: '530d8c95-f660-4419-9b23-8666501517fb'
  # Environment name
  environmentName: 'staging'

stages:
#--------------------------------------------#  
# BUILD STAGE
#--------------------------------------------#    
- stage: Build
  jobs:
  - job: BuildInfrastructure
    steps:
    #--------------------------------------------#  
    # Use Terraform to create the Infrastructure      
    # Install Terraform on the pipeline agent 
    - task: TerraformInstaller@0
      displayName: 'Terraform installation'
      inputs:
        terraformVersion: '1.9.4'
    
    # Run Terraform Init on the pipeline agent 
    - task: TerraformTaskV3@3
      displayName: 'Terraform init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/$(environmentName)'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: 'udacity-ass3'
        backendAzureRmStorageAccountName: 'nhan4599terraform'
        backendAzureRmContainerName: 'terraform-state'
        backendAzureRmKey: '$(environmentName).terraform.tfstate'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
        commandOptions: '-var "tenant_id=$(tenant_id)" -var "subscription_id=$(subscription_id)" -var "client_id=$(client_id)" -var "client_secret=$(client_secret)"'

    - task: TerraformTaskV3@3
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'

    # Run Terraform Apply
    - task: TerraformTaskV3@3
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/$(environmentName)'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
        commandOptions: '-var "tenant_id=$(tenant_id)" -var "subscription_id=$(subscription_id)" -var "client_id=$(client_id)" -var "client_secret=$(client_secret)" -var "admin_password=$(admin_password)"'

    
    #--------------------------------------------#
    # Selenium (UI) Test Suite - Archive the package  
    # "ArchiveFiles@2" picks up the web package and archives it.
    - task: ArchiveFiles@2
      displayName: 'Archive UI Tests'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automated-testing/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-ui_tests.zip'
    # Selenium Test Suite - Publish the package  
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-ui_tests.zip   # Same as the archiveFile artifact above. 
      displayName: 'Upload Package'
      artifact: ui-tests-artifact

    #--------------------------------------------#    
    # FakeRestAPI - Archive
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: /fake-rest-api
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-restapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-restapi.zip
      displayName: 'Upload FakeRestAPI Package'
      artifact: rest-api-artifact

    #--------------------------------------------#  
    # JMeter (Performance) Test Suite - Archive
    - task: ArchiveFiles@2
      displayName: 'Archive Performance testsuite'
      inputs:
        rootFolderOrFile: /automated-testing/jmeter
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perf_tests.zip'
    # JMeter Test Suite - Publish    
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perf_tests.zip
      displayName: 'Upload Performance testsuite Package'
      artifact: performance-tests-artifact

#--------------------------------------------#
# DEPLOYMENT STAGE
#--------------------------------------------#
- stage: Deploy
  jobs:
  #--------------------------------------------#  
  # Deploy FakeRestAPI Web App
  - deployment: RestAPI
    displayName: Rest APIs
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: '$(azureServiceConnectionId)'
              appName: 'api-app-AppService'
              appType: webApp
              package: $(Pipeline.Workspace)/rest-api-artifact/$(Build.BuildId)-restapi.zip 
              
  #--------------------------------------------#  
  # Selenium | Functional UI Tests
  # ToDo: 
  - deployment: SeleniumUITests
    displayName: Selenium Tests
    environment:
      name: $(environmentName)
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: ui-tests
            
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |           
                #! /bin/bash
                echo 'this is pre-built vm that comed with python3.10, selenium and chromium browser and chromium driver to run UI Tests'
                python3 ../ui-tests/functional_ui_test.py
                cat functional_ui_test_selenium.log
                "


#--------------------------------------------#
# TEST STAGE
#--------------------------------------------#
- stage: Test
  jobs:
  - job: ExecuteTests
    displayName: Execute Tests
    steps:
    # Postman Data Validation Test Suite    
    - task: Bash@3
      displayName: Run Data Validation Tests
      continueOnError: true
      inputs:
        targetType: 'inline'
        script: 'newman run validation_test.json -e staging.environment.json --reporters cli,junit --reporter-junit-export validation_test_result.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)/automated-testing/postman'
    # Postman Regression Test Suite    
    - task: Bash@3
      displayName: Run Regression Tests
      continueOnError: true
      inputs:
        targetType: 'inline'
        script: 'newman run regression_test.json -e staging.environment.json --reporters cli,junit --reporter-junit-export regression_test_result.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)/automated-testing/postman'

    - task: Bash@3
      displayName: 'Endurance Test Suite'
      inputs:
        targetType: 'inline'
        script: |
          jmeter -n \
            -t automated-testing/jmeter/endurance_test_suite.jmx \
            -l endurance-test-report/endurance-results.jtl \
            -e \
            -o endurance-test-report
    
    - task: publishhtmlreport@1
      displayName: 'Publish Endurance Test Results'
      inputs:
        htmlType: 'Jmeter'
        JmeterReportsPath: '$(Build.DefaultWorkingDirectory)/endurance-test-report'    

    - task: Bash@3
      displayName: 'Stress Test Suite'
      inputs:
        targetType: 'inline'
        script: |
          jmeter -n \
            -t automated-testing/jmeter/stress_test_suite.jmx \
            -l stress-test-report/stress-results.jtl \
            -e \
            -o stress-test-report

    - task: publishhtmlreport@1
      displayName: 'Publish Stress Test Results'
      inputs:
        htmlType: 'Jmeter'
        JmeterReportsPath: '$(Build.DefaultWorkingDirectory)/stress-test-report'

    # ToDo: Complete the task as explained here: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-test-results?view=azure-devops&tabs=trx%2Cyaml#yaml-snippet
    - task: PublishTestResults@2
      displayName: Publish Tests Result
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/*_result.xml'
        searchFolder: '$(Build.DefaultWorkingDirectory)'
        mergeTestResults: true
        testRunTitle: 'system_test'
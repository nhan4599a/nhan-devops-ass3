name: Azure Pipelines

trigger:
- master
- staging

pool: main_pool

variables:
  python.version: '3.10.14'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'test'

stages:
#--------------------------------------------#  
# BUILD STAGE
#--------------------------------------------#    
- stage: Build
  jobs:
  - job: BuildInfrastructure
    displayName: 'Build infrastructure'
    steps:
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: 'AAAAB3NzaC1yc2EAAAADAQABAAABgQDeyVOykUQeKv+ACL3MiUfaSK03KOnVoZDAF60Wmq4RRUn6XHK1OsmkjSJdtNIkdNrqkK/0KTPSJpgKwqVSbEJTWiiSyoS7irSsfsZlNUqblUAz/zz86z1YDSJxvRINPrNvTrb4qNDL1N6AaqPkj9sIGCGSIhgDYdAmSSJ8YOlFbAoNGg32XFGD1O3sSBY+f5ZqwqZW9gbAbwUw/J+PB/BSMcTcj2G2PtvluwSXjeSHsoP+ghsiDpUjty4DjnwLoepeJ5FE2/aVhKwUgOM0/FBfIPam6n8S3K9k+lTfh6TQrDHsPv93d0Pkk9cdCjI2nWU46uvWPdzBm7B7CmGpkyTPFt8h/+7Wn4oJhgGWgJC/mJww17BWWP4mLUfnng5D5BZXPFlcnqqIQSvHL/LXSenSG9zspmcJqYfBMpY6dZRHrLMnPQgzNcW9uX55ksV2+jqOwNBYiuLkHYyQPEtvjY74WIaDldHCzRhiK3/h3wBUJy48LX3d1tNeBrjx70rnMpE='
        sshKeySecureFile: 'id_rsa'

    - task: DownloadSecureFile@1
      name: public_key
      displayName: 'Download Public Key'
      inputs:
        secureFile: 'id_rsa.pub'
    #--------------------------------------------#  
    # Use Terraform to create the Infrastructure      
    # Install Terraform on the pipeline agent 
    - task: TerraformInstaller@0
      displayName: 'Terraform installation'
      inputs:
        terraformVersion: '1.9.4'
    
    # Run Terraform Init on the pipeline agent 
    - task: TerraformTaskV4@4
      displayName: 'Terraform init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/$(environmentName)'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: 'udacity-ass3'
        backendAzureRmStorageAccountName: 'udacityass3'
        backendAzureRmContainerName: 'terraform-state'
        backendAzureRmKey: '$(environmentName).terraform.tfstate'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
        commandOptions: '-var "tenant_id=$(tenant_id)" -var "subscription_id=$(subscription_id)" -var "client_id=$(client_id)" -var "client_secret=$(client_secret)"'

    - task: TerraformTaskV4@4
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'

    # Run Terraform Apply
    - task: TerraformTaskV4@4
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/$(environmentName)'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
        commandOptions: '-var "tenant_id=$(tenant_id)" -var "subscription_id=$(subscription_id)" -var "client_id=$(client_id)" -var "client_secret=$(client_secret)" -var "packer_image=$(packer_image)" -var "public_key_path=$(public_key.secureFilePath)"'

    - task: TerraformTaskV4@4
      displayName:  Terraform output
      inputs:
        provider: 'azurerm'
        command: 'custom'
        customCommand: 'output'
        outputTo: 'file'
        filename: 'terraform_output.json'
        outputDirectory: '$(System.DefaultWorkingDirectory)'
        outputFormat: 'json'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/$(environmentName)'
        showDebugOutput: true
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

    - task: Bash@3
      displayName: Prepare VMs information
      inputs:
        targetType: 'inline'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
        script: |
          VM_IP=$(grep 'vm_ip' terraform_output.json | awk -F'=' '{print $2}' | tr -d ' "')
          echo $VM_IP

    #--------------------------------------------#    
    # FakeRestAPI - Archive
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/fake-rest-api'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-restapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-restapi.zip
      displayName: 'Upload FakeRestAPI Package'
      artifact: rest-api-artifact

#--------------------------------------------#
# DEPLOYMENT STAGE
#--------------------------------------------#
- stage: Deploy
  jobs:
  #--------------------------------------------#  
  # Deploy FakeRestAPI Web App
  - deployment: RestAPI
    displayName: Rest APIs
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: '$(azureServiceConnectionId)'
              appName: 'udacity-ass3-api-app-AppService'
              appType: webApp
              package: $(Pipeline.Workspace)/rest-api-artifact/$(Build.BuildId)-restapi.zip 

#--------------------------------------------#
# TEST STAGE
#--------------------------------------------#
- stage: Test
  jobs:
  - job: ExecuteTests
    displayName: Execute Tests
    steps:
    # Postman Data Validation Test Suite    
    - task: Bash@3
      displayName: Run Data Validation Tests
      continueOnError: true
      inputs:
        targetType: 'inline'
        script: 'newman run validation_test.json -e test.environment.json --reporters cli,junit --reporter-junit-export RESULT_validation_test.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)/automated-testing/postman'
        
    # Postman Regression Test Suite    
    - task: Bash@3
      displayName: Run Regression Tests
      continueOnError: true
      inputs:
        targetType: 'inline'
        script: 'newman run regression_test.json -e test.environment.json --reporters cli,junit --reporter-junit-export RESULT_regression_test.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)/automated-testing/postman'

    - task: Bash@3
      displayName: 'Execute Endurance Test Suite'
      continueOnError: true
      inputs:
        targetType: 'inline'
        workingDirectory: '$(System.DefaultWorkingDirectory)/automated-testing/jmeter'
        script: |
          jmeter -n \
            -t ./endurance_test_suite.jmx \
            -l ./endurance-test-report/endurance-results.jtl \
            -e \
            -o ./endurance-test-report
    
    - task: publishhtmlreport@1
      displayName: 'Publish Endurance Test Results'
      inputs:
        htmlType: 'Jmeter'
        JmeterReportsPath: '$(System.DefaultWorkingDirectory)/automated-testing/jmeter/endurance-test-report'

    - task: Bash@3
      displayName: 'Stress Test Suite'
      inputs:
        targetType: 'inline'
        workingDirectory: '$(System.DefaultWorkingDirectory)/automated-testing/jmeter'
        script: |
          jmeter -n \
            -t ./stress_test_suite.jmx \
            -l ./stress-test-report/stress-results.jtl \
            -e \
            -o ./stress-test-report

    - task: publishhtmlreport@1
      displayName: 'Publish Stress Test Results'
      inputs:
        htmlType: 'Jmeter'
        JmeterReportsPath: '$(System.DefaultWorkingDirectory)/automated-testing/jmeter/stress-test-report'

    - task: Bash@3
      displayName: 'Execute selenium UI Tests'
      continueOnError: true
      inputs:
        targetType: 'inline'
        workingDirectory: '$(System.DefaultWorkingDirectory)/automated-testing/selenium'
        script: |
          export DISPLAY=:99
          echo 'this is pre-built vm that comed with python3.10, selenium and chromium browser and chromium driver to run UI Tests'
          rm ./functional_ui_test_selenium.log
          python3 ./functional_ui_test.py
          cat ./functional_ui_test_selenium.log
          sudo mkdir -p /var/log/selenium
          sudo cp -f ./functional_ui_test_selenium.log /var/log/selenium/functional_ui_test_selenium.log

    - task: Bash@3
      displayName: 'Print Performance Test Logs'
      inputs:
        targetType: 'inline'
        workingDirectory: $(System.DefaultWorkingDirectory)/automated-testing/jmeter
        script: |
          ls -lah ./endurance-test-report/
          ls -lah ./stress-test-report/
          cat jmeter.log

    # ToDo: Complete the task as explained here: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-test-results?view=azure-devops&tabs=trx%2Cyaml#yaml-snippet
    - task: PublishTestResults@2
      displayName: Publish Tests Result
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/RESULT_*.xml'
        searchFolder: '$(Build.DefaultWorkingDirectory)/automated-testing/postman'
        mergeTestResults: true
        testRunTitle: 'system_test'